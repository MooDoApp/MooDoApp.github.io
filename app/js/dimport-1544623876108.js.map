{"version":3,"sources":["webpack:///./public/js/dimport.js"],"names":["dimport","this","workflowy","login","workflowyLogin","bind","import","workflowyImport","save","workflowySave","wunderlist","wunderlistLogin","wunderlistImport","wunderlistSave","iqtell","iqtellLogin","iqtellImport","iqtellSave","opml","opmlLogin","opmlImport","opmlSave","json","jsonLogin","jsonImport","jsonSave","gtasks","gtasksLogin","gtasksImport","gtasksSave","trello","preload","trelloPreload","trelloLogin","trelloImport","trelloSave","todoist","todoistLogin","todoistImport","todoistSave","formatDate","date","toString","International__WEBPACK_IMPORTED_MODULE_7__","getFormat","DFormat","MonthDay","prototype","username","password","cb","error","_globals__WEBPACK_IMPORTED_MODULE_0__","PAssert","PERR","reportError","XHR_PrivateAPI","type","path","data","xhr","status","dataHolder","JSON","parse","response","err","errorMsg","parsedResponse","code","PrivateAPIErrorCodes","InvalidParameter","UnauthorizedUser","ErrorContactingRemote","workflowyReplaceFormatting","text","replace","workflowyIterateItem","item","parentVMLI","undefined","nm","isComplete","cp","itemText","Constants__WEBPACK_IMPORTED_MODULE_1__","Prefix","Bullet","unescape","itemVMLI","data__WEBPACK_IMPORTED_MODULE_3__","createVMLI","parent","changeType","ChangeType","AllLocal","insertItem","no","noteText","noteVMLI","isNote","setNote","Local","ch","_loopIt","i","length","__infLoop","RangeError","entry","projectTreeData","mainProjectTreeInfo","project","rootProjectChildren","tracker__WEBPACK_IMPORTED_MODULE_4__","beginAction","vmMain","beginUpdateItems","docRoot","getRootModel","impRoot","_loopIt2","parseSubtree","All","errIterate","commitUpdateItems","endAction","clientID","window","location","hostname","redirectURL","protocol","host","clientId","state","Date","getTime","url","open","handleRelayMessage","e","validOrigin","getLocationOrigin","validState","removeEventListener","requireAuth","token","access_token","addEventListener","inbox","title","items","p","listsCompleted","wunderlistGetLists","lists","_loopIt3","list","id","position","wunderlistGetTasks","tasks","_loopIt4","j","task","parent_id","taskParent","list_id","push","prevData","wunderlistGetSubtasks","subtasks","_loopIt5","listData","XHR","headers","X-Access-Token","X-Client-ID","listId","listText","listVMLI","taskId","taskVMLI","completed_at","dateCompleted","isStarred","starred","note","_loopIt6","subtask","subtaskVMLI","user","pw","input","document","getElementById","onchange","click","_readMultipleFiles","files","_loopIt7","numSuccess","numFailure","isDoneIterating","outData","rawData","errors","checkComplete","str","fileName","parse__WEBPACK_IMPORTED_MODULE_5__","_parseIQTellFilename","generateErrorString","successCB","dt","_rawData","failureCB","fReader","FileReader","onload","target","result","res","parseCSV","isString","name","onerror","readAsText","fileImport","forms","dataList","rawDataList","iqtellProcess","log","xml","startsWith","loadXML","parseOPML","changed","val","body","onfocus","parsedObj","errParse","parseJSON","errRunImport","goog__WEBPACK_IMPORTED_MODULE_6__","runAuthenticate","GScope","TasksRO","info","roots","remoteItems","unassigned","gtasksGetLists","_loopIt8","isArray","numLists","listsCreated","isArchived","due","notes","gtasksGetTasks","taskData","activeList","_loopIt9","completed","hidden","gapiKey","AccountManager__WEBPACK_IMPORTED_MODULE_8__","getDefaultAccessToken","_loopIt11","traverse","node","_loopIt10","notesVMLI","Trello","isLoading","addScript","platform__WEBPACK_IMPORTED_MODULE_2__","appPlatform","AppPlatform","Chrome","setToken","authorize","persist","expiration","success","errorCB","get","protectFn","boards","_loopIt12","totalBoards","doneBoards","checkFinished","boardDone","board","closed","boardItem","_handleBoard","doneCB","_loopIt13","doneLists","totalLists","listDone","listItem","_handleList","cards","_loopIt14","doneCards","totalCards","checklistDone","k","card","cardItem","labels","_loopIt15","labelText","z","label","TagPrefix","color","DatePrefix","desc","_loopIt16","descEntries","split","idChecklists","_loopIt17","_handleChecklist","checklist","_loopIt18","checklistItem","isCollapsed","x","checkItems","check","checkItem","nodeVMLI","_loopIt19","_loopIt20","_loopIt21","_loopIt22","parsedData","projects","is_archived","is_deleted","itemMap","item_order","itemsAtDepth","_i","project_id","checked","isNaN","indent","priorityMap","VMLIFlag","None","P2","P1","P0","createdVMLIs","vmliToItemMap","sortFn","left","right","dLeft","dRight","addItem","parentID","priority","due_date_utc","content","collapsed","insertSorted","initialize","addProject","projectParentID","projectID","projectParent","projectVMLI","hasOwnProperty","_loopIt23","_createCSVEntry","_loopIt24","_loopIt25","parsed","papaparse__WEBPACK_IMPORTED_MODULE_9___default","a","knownHeaders","requiredHeaders","indexOf","console","remove","_loopIt26","entries","join","__webpack_exports__"],"mappings":"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","file":"dimport-1544623876108.js","sourcesContent":["import g from '~/globals';\nimport C from 'Constants';\nimport platform from 'platform';\nimport d from 'data';\nimport tracker from 'tracker';\nimport parser from 'parse';\nimport goog from 'goog';\nimport International from 'International';\nimport AccountManager from 'AccountManager';\nimport papaparse from 'papaparse';\n\n//var importData = { };\nfunction dimport() {\n    this.workflowy = {\n        login: this.workflowyLogin.bind(this),\n        import: this.workflowyImport.bind(this),\n        save: this.workflowySave.bind(this)\n    };\n\n    this.wunderlist = {\n        login: this.wunderlistLogin.bind(this),\n        import: this.wunderlistImport.bind(this),\n        save: this.wunderlistSave.bind(this)\n    };\n\n    this.iqtell = {\n        login: this.iqtellLogin.bind(this),\n        import: this.iqtellImport.bind(this),\n        save: this.iqtellSave.bind(this)\n    };\n\n    this.opml = {\n        login: this.opmlLogin.bind(this),\n        import: this.opmlImport.bind(this),\n        save: this.opmlSave.bind(this)\n    };\n\n    this.json = {\n        login: this.jsonLogin.bind(this),\n        import: this.jsonImport.bind(this),\n        save: this.jsonSave.bind(this)\n    };\n\n    // this.text =\n    // {\n    //     'login': this.textLogin.bind(this),\n    //     'import': this.textImport.bind(this),\n    //     'save': this.textSave.bind(this)\n    // };\n\n    this.gtasks = {\n        login: this.gtasksLogin.bind(this),\n        import: this.gtasksImport.bind(this),\n        save: this.gtasksSave.bind(this)\n    };\n\n    this.trello = {\n        preload: this.trelloPreload.bind(this),\n        login: this.trelloLogin.bind(this),\n        import: this.trelloImport.bind(this),\n        save: this.trelloSave.bind(this)\n    };\n\n    // this.toodledo =\n    // {\n    //     'login': this.toodledoLogin.bind(this),\n    //     'import': this.toodledoImport.bind(this),\n    //     'save': this.toodledoSave.bind(this)\n    // };\n\n    this.todoist = {\n        login: this.todoistLogin.bind(this),\n        import: this.todoistImport.bind(this),\n        save: this.todoistSave.bind(this)\n    };\n}\n\nfunction formatDate(date) {\n    return date.toString(International.getFormat(DFormat.MonthDay));\n}\n\ndimport.prototype = {\n    workflowyLogin: function workflowyLogin(username, password, cb, error) {\n        try{g.PAssert(2339,cb, 'Workflowy requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2340,error, 'Workflowy requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        if (!username) {\n            return error('Must provide a valid username.');\n        }\n\n        if (!password) {\n            return error('Must provide a password.');\n        }\n\n        g.XHR_PrivateAPI({\n            type: 'POST',\n            path: '/oauth/workflowy',\n            data: { username: username, password: password },\n            cb: function (xhr) {\n                if (DEBUG) {\n                    log('Workflowy Login Response: ', xhr);\n                }\n\n                if (xhr.status === 200) {\n                    try {\n                        var dataHolder = JSON.parse(xhr.response);\n\n                        this.workflowy.data = JSON.parse(dataHolder.data);\n                    } catch (err) {\n                        g.reportError(err);\n\n                        return error('Error parsing successful response from server. The developers have been notified with details of the error.');\n                    }\n\n                    if (!this.workflowy.data || this.workflowy.data.error) {\n                        return error('Invalid username or password.');\n                    } else {\n                        return cb();\n                    }\n                } else {\n                    if (DEBUG) {\n                        log('XHR Status: ' + xhr.status);\n                    }\n\n                    var errorMsg;\n\n                    try {\n                        var parsedResponse = JSON.parse(xhr.response);\n\n                        switch (parsedResponse.code) {\n                            case PrivateAPIErrorCodes.InvalidParameter:\n                                errorMsg = 'Must specify a username and password.';\n                                break;\n                            case PrivateAPIErrorCodes.UnauthorizedUser:\n                                errorMsg = 'Invalid username or password.';\n                                break;\n                            case PrivateAPIErrorCodes.ErrorContactingRemote:\n                                errorMsg = parsedResponse.data;\n                                break;\n                            default:\n                                errorMsg = 'Error contacting server. The developers have been notified with details of the error.';\n                                break;\n                        }\n                    } catch (err) {\n                        errorMsg = 'Error parsing error response from server. The developers have been notified with details of the error.';\n\n                        g.reportError(err);\n                    }\n\n                    return error(errorMsg);\n                }\n            }.bind(this)\n        });\n    },\n    workflowyImport: function workflowyImport(cb, error) {\n        try{g.PAssert(2341,cb, 'Workflowy requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2342,error, 'Workflowy requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        return cb(this.workflowy.data);\n    },\n    workflowyReplaceFormatting: function workflowyReplaceFormatting(text) {\n        return text.replace(/<b>|<\\/b>/g, '**').replace(/<i>|<\\/i>/g, '*').replace(/<u>|<\\/u>/g, '__');\n    },\n    workflowyIterateItem: function workflowyIterateItem(item, parentVMLI) {\n        try{g.PAssert(2343,item && item.nm !== undefined, 'All items must exist and have stars and text, children and notes are optional', item);}catch(PERR){g.reportError(PERR);}\n\n        // try{g.PAssert(2344,item.lm === IS_COMPLETE_VALUE || item.lm === IS_DEFAULT_VALUE || item.lm === IS_UNKNOWN_VALUE0 || item.lm === IS_UNKNOWN_VALUE1, 'Unexpected lm value for workflowy import: ' + item.lm);}catch(PERR){g.reportError(PERR);}\n\n        try{g.PAssert(2345,parentVMLI, 'A valid parent must always be defined');}catch(PERR){g.reportError(PERR);}\n\n        if (item && parentVMLI) {\n            try {\n                var isComplete = !!item.cp;\n\n                if (!isComplete) {\n                    var itemText = C.Prefix.Bullet + ' ' + g.unescape(this.workflowyReplaceFormatting(item.nm));\n\n                    var itemVMLI = d.createVMLI({ text: itemText, isComplete: isComplete }, { parent: parentVMLI, changeType: ChangeType.AllLocal });\n                    parentVMLI.insertItem(itemVMLI);\n\n                    // Items may have notes\n                    if (item.no) {\n                        var noteText = g.unescape(item.no);\n\n                        var noteVMLI = d.createVMLI({ text: noteText, isNote: true }, { parent: itemVMLI, changeType: ChangeType.AllLocal });\n                        itemVMLI.setNote(noteVMLI, ChangeType.Local);\n                    }\n\n                    // Items may also have children\n                    if (item.ch) {\n                        var _loopIt = 0;\n\n                        for (var i = 0; i < item.ch.length; ++i) {\n                            if (_loopIt++ > 5000 && __infLoop && __infLoop(_loopIt)) throw new RangeError();\n\n                            var entry = item.ch[i];\n\n                            this.workflowyIterateItem(entry, itemVMLI);\n                        }\n                    }\n                }\n            } catch (err) {\n                g.reportError(err);\n\n                throw err;\n            }\n        }\n    },\n    workflowySave: function workflowySave(data, cb, error) {\n        try{g.PAssert(2346,data, 'Workflowy requires having valid data');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2347,cb, 'Workflowy requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2348,error, 'Workflowy requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        try {\n            try{g.PAssert(2349,data.projectTreeData, 'Missing Workflowy projectTreeData');}catch(PERR){g.reportError(PERR);}\n            try{g.PAssert(2350,data.projectTreeData.mainProjectTreeInfo, 'Missing Workflowy mainProjectTreeInfo');}catch(PERR){g.reportError(PERR);}\n\n            var project = data.projectTreeData.mainProjectTreeInfo;\n            try{g.PAssert(2351,project.rootProjectChildren, 'Missing Workflowy rootProjectChildren');}catch(PERR){g.reportError(PERR);}\n\n            tracker.beginAction(); // BEGIN TRACKER <----\n            g.vmMain.beginUpdateItems();\n\n            var docRoot = d.getRootModel();\n            try{g.PAssert(2352,docRoot, 'Root item must exist in order to import');}catch(PERR){g.reportError(PERR);}\n\n            var impRoot = d.createVMLI({ text: 'Workflowy Import' }, { parent: docRoot, changeType: ChangeType.AllLocal });\n            docRoot.insertItem(impRoot);\n\n            try {\n                var _loopIt2 = 0;\n\n                for (var i = 0; i < project.rootProjectChildren.length; ++i) {\n                    if (_loopIt2++ > 5000 && __infLoop && __infLoop(_loopIt2)) throw new RangeError();\n\n                    var entry = project.rootProjectChildren[i];\n\n                    this.workflowyIterateItem(entry, impRoot);\n                }\n\n                g.vmMain.parseSubtree(impRoot, /*changeType*/ChangeType.Local | ChangeType.All);\n            } catch (errIterate) {\n                g.reportError(errIterate);\n\n                return error('There was an error iterating your Workflowy items. The developers have been notified with daetails of the error.', errIterate);\n            }\n\n            g.vmMain.commitUpdateItems();\n            tracker.endAction(); // END TRACKER <----\n\n            return cb();\n        } catch (err) {\n            g.reportError(err);\n\n            return error('There was an error parsing your Workflowy data. The developers have been notified with details of the error.', err);\n        }\n    },\n    wunderlistLogin: function wunderlistLogin(username, password, cb, error) {\n        try{g.PAssert(2353,cb, 'Wunderlist requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2354,error, 'Wunderlist requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        var clientID = window.location.hostname === 'localhost' ? 'f06a1334e250a9bb0b03' : 'ad988eeb954e9aabc288';\n        var redirectURL = window.location.protocol + '//' + window.location.host + '/oauthRelay.html';\n\n        this.wunderlist.clientId = clientID;\n\n        var state = 'Dchs' + new Date().getTime();\n\n        var url = 'https://www.wunderlist.com/oauth/authorize?client_id=' + clientID + '&redirect_uri=' + redirectURL + '&state=' + state;\n\n        window.open(url, 'modal-wunderlist', 'height=600,width=550');\n\n        var handleRelayMessage = function (e) {\n            var validOrigin = g.getLocationOrigin();\n            var validState = false;\n\n            try {\n                validState = e.data.state === state;\n            } catch (err) {\n                g.reportError(err);\n            }\n\n            if (validOrigin && validState) {\n                window.removeEventListener('message', handleRelayMessage);\n\n                if (e.data.error) {\n                    error('Error authenticating with Wunderlist');\n                } else {\n                    var code = e.data.code;\n\n                    if (code) {\n                        g.XHR_PrivateAPI({\n                            type: 'POST',\n                            path: '/oauth/wunderlist',\n                            data: { code: code },\n                            requireAuth: true,\n                            cb: function (xhr) {\n                                if (DEBUG) {\n                                    log('Wunderlist Login Reponse: ', xhr);\n                                }\n\n                                if (xhr.status === 200) {\n                                    try {\n                                        var data = JSON.parse(xhr.response).data;\n\n                                        this.wunderlist.token = data.access_token;\n                                    } catch (err) {\n                                        error('Error parsing response from remote server.', err);\n                                    }\n\n                                    if (!this.wunderlist.token) {\n                                        error('Invalid username or password.');\n                                    } else {\n                                        cb();\n                                    }\n                                } else {\n                                    error('Error contacting remote server.');\n                                }\n                            }.bind(this)\n                        });\n                    }\n                }\n            }\n        }.bind(this);\n\n        window.addEventListener('message', handleRelayMessage);\n    },\n    wunderlistImport: function wunderlistImport(cb, error) {\n        try{g.PAssert(2355,cb, 'Wunderlist requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2356,error, 'Wunderlist requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        var data = {\n            'inbox': {\n                title: 'inbox',\n                items: {},\n                p: 0\n            }\n        };\n\n        var listsCompleted = 0;\n\n        this.wunderlistGetLists(function (lists) {\n            var _loopIt3 = 0;\n\n            if (DEBUG) {\n                log('Get ListData Response: ', lists);\n            }\n\n            for (var i = 0; i < lists.length; ++i) {\n                if (_loopIt3++ > 5000 && __infLoop && __infLoop(_loopIt3)) throw new RangeError();\n\n                var list = lists[i];\n\n                data[list.id] = {\n                    title: list.title,\n                    items: {},\n                    p: list.position\n                };\n\n                this.wunderlistGetTasks(list.id, function (tasks) {\n                    var _loopIt4 = 0;\n\n                    if (DEBUG) {\n                        log('Get TaskData Response: ', tasks);\n                    }\n\n                    for (var j = 0; j < tasks.length; ++j) {\n                        if (_loopIt4++ > 5000 && __infLoop && __infLoop(_loopIt4)) throw new RangeError();\n\n                        var task = tasks[j];\n\n                        if (task.parent_id) {\n                            var taskParent = data[task.list_id].items[task.parent_id];\n\n                            if (taskParent) {\n                                if (!taskParent.items) {\n                                    taskParent.items = [];\n                                }\n\n                                taskParent.items.push(task);\n                            } else {\n                                data[task.list_id].items[task.parent_id] = { items: [task] };\n                            }\n                        } else {\n                            var prevData = data[task.list_id].items[task.id];\n\n                            data[task.list_id].items[task.id] = task;\n\n                            if (prevData) {\n                                data[task.list_id].items[task.id].items = prevData.items;\n                            }\n                        }\n                    }\n\n                    this.wunderlistGetSubtasks(list.id, function (subtasks) {\n                        var _loopIt5 = 0;\n\n                        for (var j = 0; j < subtasks.length; ++j) {\n                            if (_loopIt5++ > 5000 && __infLoop && __infLoop(_loopIt5)) throw new RangeError();\n\n                            var task = subtasks[j];\n\n                            var listData = data[task.list_id];\n\n                            if (listData) {\n                                if (task.parent_id) {\n                                    var taskParent = listData.items[task.parent_id];\n\n                                    if (taskParent) {\n                                        if (!taskParent.items) {\n                                            taskParent.items = [];\n                                        }\n\n                                        taskParent.items.push(task);\n                                    } else {\n                                        listData.items[task.parent_id] = { items: [task] };\n                                    }\n                                } else {\n                                    var prevData = listData.items[task.id];\n\n                                    listData.items[task.id] = task;\n\n                                    if (prevData) {\n                                        listData.items[task.id].items = prevData.items;\n                                    }\n                                }\n                            }\n                        }\n\n                        if (++listsCompleted === lists.length) {\n                            cb(data);\n                        }\n                    }.bind(this), error);\n                }.bind(this), error);\n            }\n        }.bind(this), error);\n    },\n    wunderlistGetLists: function wunderlistGetLists(cb, error) {\n        try{g.PAssert(2357,cb, 'Wunderlist requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2358,error, 'Wunderlist requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        g.XHR({\n            type: 'GET',\n            url: 'https://a.wunderlist.com/api/v1/lists',\n            headers: { 'X-Access-Token': this.wunderlist.token, 'X-Client-ID': this.wunderlist.clientId },\n            cb: function (xhr) {\n                if (xhr.status === 200) {\n                    var data;\n\n                    try {\n                        data = JSON.parse(xhr.response);\n                    } catch (err) {\n                        error('There was an error parsing your Wunderlist data. The developers have been notified with details of the error.', err);\n                    }\n\n                    cb(data);\n                } else {\n                    if (DEBUG) {\n                        log('XHR Status: ' + xhr.status);\n                    }\n\n                    error('Error contacting remote server.');\n                }\n            }.bind(this)\n        });\n    },\n    wunderlistGetTasks: function wunderlistGetTasks(listId, cb, error) {\n        try{g.PAssert(2359,cb, 'Wunderlist requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2360,error, 'Wunderlist requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        g.XHR({\n            type: 'GET',\n            url: 'https://a.wunderlist.com/api/v1/tasks?list_id=' + listId,\n            headers: { 'X-Access-Token': this.wunderlist.token, 'X-Client-ID': this.wunderlist.clientId },\n            cb: function (xhr) {\n                if (xhr.status === 200) {\n                    var data = JSON.parse(xhr.response);\n\n                    cb(data);\n                } else {\n                    if (DEBUG) {\n                        log('XHR Status: ' + xhr.status);\n                    }\n\n                    error('Error contacting remote server.');\n                }\n            }.bind(this)\n        });\n    },\n    wunderlistGetSubtasks: function wunderlistGetSubtasks(listId, cb, error) {\n        try{g.PAssert(2361,cb, 'Wunderlist requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2362,error, 'Wunderlist requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        g.XHR({\n            type: 'GET',\n            url: 'https://a.wunderlist.com/api/v1/subtasks?list_id=' + listId,\n            headers: { 'X-Access-Token': this.wunderlist.token, 'X-Client-ID': this.wunderlist.clientId },\n            cb: function (xhr) {\n                if (xhr.status === 200) {\n                    var data = JSON.parse(xhr.response);\n\n                    cb(data);\n                } else {\n                    if (DEBUG) {\n                        log('XHR Status: ' + xhr.status);\n                    }\n\n                    error('Error contacting remote server.');\n                }\n            }.bind(this)\n        });\n    },\n    wunderlistSave: function wunderlistSave(data, cb, error) {\n        try{g.PAssert(2363,cb, 'Wunderlist requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2364,error, 'Wunderlist requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        try {\n            tracker.beginAction(); // BEGIN TRACKER <----\n            g.vmMain.beginUpdateItems();\n\n            var docRoot = d.getRootModel();\n            try{g.PAssert(2365,docRoot, 'Root item must exist in order to import');}catch(PERR){g.reportError(PERR);}\n\n            var impRoot = d.createVMLI({ text: 'Wunderlist Import' }, { parent: docRoot, changeType: ChangeType.AllLocal });\n            docRoot.insertItem(impRoot);\n\n            for (var listId in data) {\n                var list = data[listId];\n                if (DEBUG) {\n                    log('List: ', list);\n                }\n\n                var listText = list.title;\n\n                var listVMLI = d.createVMLI({\n                    text: listText\n                }, {\n                    parent: impRoot,\n                    changeType: ChangeType.AllLocal\n                });\n                impRoot.insertItem(listVMLI);\n\n                for (var taskId in list.items) {\n                    var task = list.items[taskId];\n                    if (DEBUG) {\n                        log('  Task: ', task);\n                    }\n\n                    var taskVMLI = d.createVMLI({\n                        text: task.title,\n                        isComplete: !!task.completed_at,\n                        dateCompleted: task.completed_at,\n                        isStarred: task.starred\n                    }, {\n                        parent: listVMLI,\n                        changeType: ChangeType.AllLocal\n                    });\n                    listVMLI.insertItem(taskVMLI);\n\n                    if (task.note) {\n                        var noteVMLI = d.createVMLI({\n                            text: task.note\n                        }, {\n                            parent: taskVMLI,\n                            changeType: ChangeType.AllLocal\n                        });\n                        taskVMLI.insertItem(noteVMLI);\n                    }\n\n                    if (task.items) {\n                        var _loopIt6 = 0;\n\n                        for (var j = 0; j < task.items.length; ++j) {\n                            if (_loopIt6++ > 5000 && __infLoop && __infLoop(_loopIt6)) throw new RangeError();\n\n                            var subtask = task.items[j];\n                            if (DEBUG) {\n                                log('    SubTask: ', subtask);\n                            }\n\n                            var subtaskVMLI = d.createVMLI({\n                                text: subtask.title,\n                                isComplete: !!subtask.completed_at,\n                                dateCompleted: subtask.completed_at,\n                                isStarred: subtask.starred\n                            }, {\n                                parent: taskVMLI,\n                                changeType: ChangeType.AllLocal\n                            });\n                            taskVMLI.insertItem(subtaskVMLI);\n                        }\n                    }\n                }\n            }\n\n            g.vmMain.parseSubtree(impRoot, /*changeType*/ChangeType.Local | ChangeType.All);\n\n            g.vmMain.commitUpdateItems();\n            tracker.endAction(); // END TRACKER <----\n\n            cb();\n        } catch (err) {\n            error(undefined, err);\n        }\n    },\n    iqtellLogin: function iqtellLogin(user, pw, cb, error) {\n        try{g.PAssert(2366,cb, 'IQTell requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2367,error, 'IQTell requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        var input = document.getElementById('importFileUploadButton');\n        input.onchange = cb;\n\n        input.click();\n    },\n    _readMultipleFiles: function _readMultipleFiles(files, cb, error) {\n        var _loopIt7 = 0;\n\n        var numSuccess = 0;\n        var numFailure = 0;\n        var isDoneIterating = false;\n\n        var outData = {};\n        var rawData = {};\n        var errors = {};\n\n        function generateErrorString() {\n            var str = '';\n\n            for (var fileName in errors) {\n                str += parser._parseIQTellFilename(fileName) + ': ' + errors[fileName] + '\\r\\n';\n            }\n\n            return str;\n        }\n\n        function checkComplete() {\n            if (isDoneIterating && numSuccess + numFailure === files.length) {\n                if (numFailure > 0) {\n                    error(generateErrorString());\n                } else {\n                    cb(outData, rawData);\n                }\n            }\n        }\n\n        function successCB(dt, fileName, _rawData) {\n            outData[fileName] = dt;\n\n            rawData[fileName] = _rawData;\n\n            numSuccess++;\n\n            checkComplete();\n        }\n\n        function failureCB(err, fileName) {\n            errors[fileName] = err;\n\n            numFailure++;\n\n            checkComplete();\n        }\n\n        for (var i = 0; i < files.length; ++i) {\n            if (_loopIt7++ > 5000 && __infLoop && __infLoop(_loopIt7)) throw new RangeError();\n\n            var fReader = new FileReader();\n\n            fReader.onload = function (fileName, e) {\n                var data = e.target.result;\n\n                if (data) {\n                    var res = this.parseCSV(data);\n\n                    if (res && !g.isString(res)) {\n                        successCB(res, fileName, data);\n                    } else {\n                        failureCB(res || 'Error parsing IQTell import. Please validate your data.', fileName);\n                    }\n                } else {\n                    failureCB('Unable to load IQTell data. Please contact support.', fileName);\n                }\n            }.bind(this, files[i].name);\n\n            fReader.onerror = function (fileName, e) {\n                failureCB(e, fileName);\n            }.bind(this, files[i].name);\n\n            fReader.readAsText(files[i]);\n        }\n\n        isDoneIterating = true;\n\n        checkComplete();\n    },\n    iqtellImport: function iqtellImport(cb, error) {\n        try{g.PAssert(2368,cb, 'IQTell requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2369,error, 'IQTell requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        try {\n            var fileImport = document.forms['importFileUpload']['importFile'].files;\n\n            if (!fileImport || fileImport.length === 0) {\n                error('You must select a file before importing.');\n            } else {\n                var handleSuccess = function handleSuccess(dataList, rawDataList) {\n                    tracker.beginAction(); // BEGIN TRACKER <----\n                    g.vmMain.beginUpdateItems();\n\n                    var items;\n\n                    try {\n                        items = parser.iqtellProcess(dataList, rawDataList);\n                    } catch (err) {\n                        g.reportError(err, rawDataList);\n                    }\n\n                    log('IQTell output: ', items);\n\n                    g.vmMain.commitUpdateItems();\n                    tracker.endAction(); // END TRACKER <----\n\n                    if (items) {\n                        cb();\n                    } else {\n                        error('Error parsing IQTell import. Please contact support');\n                    }\n                };\n\n                this._readMultipleFiles(fileImport, handleSuccess, error);\n            }\n        } catch (err) {\n            error(undefined, err);\n        }\n    },\n    iqtellSave: function iqtellSave(data, cb, error) {\n        try{g.PAssert(2370,cb, 'IQTell requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2371,error, 'IQTell requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        if (DEBUG) {\n            log('IQTell Save: ', data);\n        }\n\n        cb();\n    },\n    opmlLogin: function opmlLogin(user, pw, cb, error) {\n        try{g.PAssert(2372,cb, 'OPML requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2373,error, 'OPML requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        var input = document.getElementById('importFileUploadButton');\n        input.onchange = cb;\n\n        input.click();\n    },\n    opmlImport: function opmlImport(cb, error) {\n        try{g.PAssert(2374,cb, 'OPML requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2375,error, 'OPML requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        try {\n            var fReader = new FileReader();\n\n            var fileImport = document.forms['importFileUpload']['importFile'].files[0];\n\n            if (!fileImport) {\n                error('You must select a file before importing.');\n            } else {\n                fReader.onload = function (e) {\n                    var data = e.target.result;\n\n                    var xml;\n                    if (data.startsWith('<?xml ') || data.startsWith('<?opml ') || data.startsWith('<opml ')) {\n                        xml = g.loadXML(data);\n                    }\n\n                    if (xml) {\n                        tracker.beginAction(); // BEGIN TRACKER <----\n                        g.vmMain.beginUpdateItems();\n\n                        var res = parser.parseOPML(xml, fileImport.name);\n\n                        g.vmMain.commitUpdateItems();\n                        tracker.endAction(); // END TRACKER <----\n\n                        if (res) {\n                            cb();\n                        } else {\n                            error('Error parsing OPML. Please validate your data.');\n                        }\n                    } else {\n                        error('Unable to load XML lib. Please update or try another browser.');\n                    }\n                };\n\n                fReader.onerror = error;\n\n                fReader.readAsText(fileImport);\n            }\n        } catch (err) {\n            error(undefined, err);\n        }\n    },\n    opmlSave: function opmlSave(data, cb, error) {\n        try{g.PAssert(2376,cb, 'OPML requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2377,error, 'OPML requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        if (DEBUG) {\n            log('OPML Save: ', data);\n        }\n\n        cb();\n    },\n    jsonLogin: function jsonLogin(user, pw, cb, error) {\n        try{g.PAssert(2378,cb, 'JSON requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2379,error, 'JSON requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        var input = document.getElementById('importFileUploadButton');\n        var changed = false;\n        input.onchange = function (val) {\n            changed = true;\n            cb(val);\n        };\n\n        input.click();\n\n        // When the body comes back into focus, the upload dialog has been closed\n        var onFocus = function onFocus() {\n            if (!changed) {\n                error(false);\n            }\n            document.body.onfocus = undefined;\n        };\n\n        document.body.onfocus = onFocus;\n    },\n    jsonImport: function jsonImport(cb, error) {\n        try {\n            var fReader = new FileReader();\n\n            var fileImport = document.forms['importFileUpload']['importFile'].files[0];\n\n            if (!fileImport) {\n                error('You must select a file before importing.');\n            } else {\n                fReader.onload = function (e) {\n                    var data = e.target.result;\n\n                    if (data) {\n                        try {\n                            var parsedObj = JSON.parse(data);\n                        } catch (errParse) {\n                            return error('The JSON is not properly formatted. Please re-validate or send the file to support@moo.do.');\n                        }\n\n                        try {\n                            tracker.beginAction(); // BEGIN TRACKER <----\n                            g.vmMain.beginUpdateItems();\n\n                            var res = parser.parseJSON(parsedObj);\n\n                            g.vmMain.commitUpdateItems();\n                            tracker.endAction(); // END TRACKER <----\n\n                            if (res) {\n                                return cb();\n                            } else {\n                                return error('Invalid JSON format. The developers have been notified with details of the error.');\n                            }\n                        } catch (errRunImport) {\n                            return error('The JSON file has errors. The developers have been notified with details of the error.', errRunImport);\n                        }\n                    } else {\n                        return error('Unable to import your requested file. Please try a different file.');\n                    }\n                };\n\n                fReader.onerror = error;\n\n                fReader.readAsText(fileImport);\n            }\n        } catch (err) {\n            error(undefined, err);\n        }\n    },\n    jsonSave: function jsonSave(data, cb, error) {\n        try{g.PAssert(2380,cb, 'JSON requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2381,error, 'JSON requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        cb();\n    },\n    // textLogin: function (user, pw, cb, error)\n    // {\n    //     try{g.PAssert(2382,cb, 'OPML requires a success callback');}catch(PERR){g.reportError(PERR);}\n    //     try{g.PAssert(2383,error, 'OPML requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n    //     cb();\n    // },\n    // textImport: function (cb, error)\n    // {\n    //     var data = document.getElementById('importFileDataBox').textContent;\n\n    //     var xml;\n    //     if (data.startsWith('<?xml ') || data.startsWith('<opml '))\n    //     {\n    //         try\n    //         {\n    //             xml = g.loadXML(data);\n\n    //             if (xml)\n    //             {\n    //                 var res = parser.parseOPML(xml, 'Import Data');\n\n    //                 if (res)\n    //                 {\n    //                     cb();\n\n    //                     return;\n    //                 }\n    //             }\n    //         }\n    //         catch (errParse)\n    //         {\n    //             // Do Nothing\n    //         }\n    //     }\n\n    //     if (data.startsWith('{') && data.endsWith('}'))\n    //     {\n    //         try\n    //         {\n    //             var parsedObj = JSON.parse(data);\n\n    //             var res = parser.parseJSON(parsedObj);\n\n    //             if (res)\n    //             {\n    //                 cb();\n\n    //                 return;\n    //             }\n    //         }\n    //         catch (errParse)\n    //         {\n    //             // Do Nothing\n    //         }\n    //     }\n\n    //     error('Text Import Not Supported');\n    //     // TODO: Refactor copypaste code to allow reuse of text import\n    // },\n    // textSave: function (data, cb, error)\n    // {\n    //     try{g.PAssert(2384,cb, 'OPML requires a success callback');}catch(PERR){g.reportError(PERR);}\n    //     try{g.PAssert(2385,error, 'OPML requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n    //     if (DEBUG) { log('Text Save: ', data); }\n\n    //     cb();\n    // },\n    gtasksLogin: function gtasksLogin(username, password, cb, error) {\n        try{g.PAssert(2386,cb, 'GTasks requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2387,error, 'GTasks requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        goog.runAuthenticate([GScope.TasksRO], /*runImmediate*/false, /*retry*/false, function (token) {\n            if (token && !token.error) {\n                this.gtasks.token = token;\n\n                cb(token);\n            } else {\n                if (DEBUG) {\n                    log('Error getting Google TaskRO permission: ', token);\n                }\n\n                error('Unable to authenticate with Google. Please try again.', token);\n            }\n        }.bind(this));\n    },\n    gtasksImport: function gtasksImport(cb, error) {\n        try{g.PAssert(2388,cb, 'GTasks requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2389,error, 'GTasks requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        var info = {\n            roots: [],\n            remoteItems: {},\n            unassigned: []\n        };\n\n        this.gtasksGetLists(function (listData) {\n            var _loopIt8 = 0;\n\n            try{g.PAssert(2390,g.isArray(listData), 'List data must be an array');}catch(PERR){g.reportError(PERR);}\n\n            //log('GTask List Data: ', listData);\n\n            var numLists = listData.length;\n            var listsCreated = 0;\n\n            for (var i = 0; i < listData.length; ++i) {\n                if (_loopIt8++ > 5000 && __infLoop && __infLoop(_loopIt8)) throw new RangeError();\n\n                var list = listData[i];\n\n                //log(' -- List: ' + list.title + ' --');\n\n                info.remoteItems[list.id] = {\n                    id: list.id,\n                    text: list.title,\n                    isComplete: false,\n                    dateCompleted: undefined,\n                    isArchived: false,\n                    due: undefined,\n                    notes: undefined,\n                    parent: undefined,\n                    items: []\n                };\n\n                info.roots.push(list.id);\n\n                this.gtasksGetTasks(list, function (taskData, activeList) {\n                    if (taskData) {\n                        try{g.PAssert(2391,g.isArray(taskData), 'List data must be an array');}catch(PERR){g.reportError(PERR);}\n\n                        if (g.isArray(taskData)) {\n                            var _loopIt9 = 0;\n\n                            for (var j = 0; j < taskData.length; ++j) {\n                                if (_loopIt9++ > 5000 && __infLoop && __infLoop(_loopIt9)) throw new RangeError();\n\n                                var task = taskData[j];\n\n                                if (task && task.status !== 'completed') {\n                                    info.remoteItems[task.id] = {\n                                        id: task.id,\n                                        text: task.title,\n                                        isComplete: task.status === 'completed',\n                                        dateCompleted: task.completed ? new Date(task.completed) : undefined,\n                                        isArchived: task.hidden,\n                                        due: task.due ? new Date(task.due) : undefined,\n                                        notes: task.notes,\n                                        parent: task.parent || activeList.id,\n                                        items: []\n                                    };\n\n                                    var parent = info.remoteItems[task.parent || activeList.id];\n\n                                    if (parent) {\n                                        parent.items.push(task.id);\n                                    } else {\n                                        info.unassigned.push(task.id);\n                                    }\n                                }\n\n                                //log('  Task: ', task);\n                            }\n\n                            listsCreated++;\n\n                            if (listsCreated === numLists) {\n                                cb(info);\n                            }\n                        } else {\n                            error('Invalid task list returned.');\n                        }\n                    } else {\n                        listsCreated++;\n                    }\n                }.bind(this), error);\n            }\n        }.bind(this), error);\n    },\n    gtasksGetLists: function gtasksGetLists(cb, error) {\n        try{g.PAssert(2392,cb, 'GTasks requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2393,error, 'GTasks requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        var maxResults = 2000;\n        g.XHR({\n            type: 'GET',\n            url: 'https://www.googleapis.com/tasks/v1/users/@me/lists?maxResults=' + maxResults + '&key=' + window.gapiKey + '&access_token=' + AccountManager.getDefaultAccessToken(),\n            cb: function (xhr) {\n                if (xhr.status === 200) {\n                    try {\n                        var data = JSON.parse(xhr.response);\n                        try{g.PAssert(2394,data && data.items, 'Must have a valid set of data to get tasks from');}catch(PERR){g.reportError(PERR);}\n\n                        if (data && data.items) {\n                            cb(data.items);\n                        } else {\n                            error('Error getting data from remote server.');\n                        }\n                    } catch (err) {\n                        error(err);\n                    }\n                } else {\n                    if (DEBUG) {\n                        log('XHR Status: ' + xhr.status);\n                    }\n\n                    error('Error contacting remote server.');\n                }\n            }.bind(this)\n        });\n    },\n    gtasksGetTasks: function gtasksGetTasks(list, cb, error) {\n        try{g.PAssert(2395,list, 'GTasks requires a valid list to get tasks from');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2396,cb, 'GTasks requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2397,error, 'GTasks requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        var maxResults = 2500;\n        g.XHR({\n            type: 'GET',\n            url: 'https://www.googleapis.com/tasks/v1/lists/' + list.id + '/tasks?maxResults=' + maxResults + '&key=' + window.gapiKey + '&access_token=' + AccountManager.getDefaultAccessToken(),\n            cb: function (xhr) {\n                if (xhr.status === 200) {\n                    try {\n                        var data = JSON.parse(xhr.response);\n                        try{g.PAssert(2398,data, 'Must have a valid array of tasks');}catch(PERR){g.reportError(PERR);}\n\n                        if (data && data.items) {\n                            cb(data.items, list);\n                        } else {\n                            cb([], list);\n                        }\n                    } catch (err) {\n                        error(err);\n                    }\n                } else {\n                    if (DEBUG) {\n                        log('XHR Status: ' + xhr.status);\n                    }\n\n                    error('Error contacting remote server.');\n                }\n            }.bind(this)\n        });\n    },\n    gtasksSave: function gtasksSave(data, cb, error) {\n        try{g.PAssert(2399,cb, 'GTasks requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2400,error, 'GTasks requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        try {\n            var _loopIt11 = 0;\n\n            var traverse = function traverse(node, parentVMLI) {\n                var _loopIt10 = 0;\n\n                var itemText = node.text;\n\n                if (node.due) {\n                    itemText += ' @' + formatDate(node.due);\n                }\n\n                var itemVMLI = d.createVMLI({\n                    text: itemText,\n                    isComplete: node.isComplete,\n                    dateCompleted: node.dateCompleted ? node.dateCompleted.getTime() : node.dateCompleted,\n                    isArchived: node.isArchived\n                }, {\n                    parent: parentVMLI,\n                    changeType: ChangeType.AllLocal\n                });\n                parentVMLI.insertItem(itemVMLI);\n\n                if (node.notes) {\n                    var notesVMLI = d.createVMLI({\n                        text: node.notes,\n                        isNote: true\n                    }, {\n                        parent: itemVMLI,\n                        changeType: ChangeType.AllLocal\n                    });\n\n                    itemVMLI.setNote(notesVMLI, ChangeType.Local);\n                }\n\n                for (var i = 0; i < node.items.length; ++i) {\n                    if (_loopIt10++ > 5000 && __infLoop && __infLoop(_loopIt10)) throw new RangeError();\n\n                    traverse(data.remoteItems[node.items[i]], itemVMLI);\n                }\n            };\n\n            try{g.PAssert(2401,data.unassigned.length === 0, 'We should never have unassigned tasks');}catch(PERR){g.reportError(PERR);}\n\n            tracker.beginAction(); // BEGIN TRACKER <----\n            g.vmMain.beginUpdateItems();\n\n            var docRoot = d.getRootModel();\n            try{g.PAssert(2402,docRoot, 'Root item must exist in order to import');}catch(PERR){g.reportError(PERR);}\n\n            var impRoot = d.createVMLI({ text: 'Google Tasks Import' }, { parent: docRoot, changeType: ChangeType.AllLocal });\n            docRoot.insertItem(impRoot);\n\n            for (var i = 0; i < data.roots.length; ++i) {\n                if (_loopIt11++ > 5000 && __infLoop && __infLoop(_loopIt11)) throw new RangeError();\n\n                traverse(data.remoteItems[data.roots[i]], impRoot);\n            }\n\n            g.vmMain.parseSubtree(impRoot, /*changeType*/ChangeType.Local | ChangeType.All);\n\n            g.vmMain.commitUpdateItems();\n            tracker.endAction(); // END TRACKER <----\n\n            cb();\n        } catch (err) {\n            error(undefined, err);\n        }\n    },\n    trelloPreload: function trelloPreload(cb, error) {\n        var appKey = '667ecf0c3d3e029c51d205b7173f6c38';\n\n        if (!window.Trello && !this.trello.isLoading) {\n            this.trello.isLoading = true;\n\n            g.addScript('https://code.jquery.com/jquery-1.7.1.min.js', 'jqueryScript', function () {\n                g.addScript('https://api.trello.com/1/client.js?key=' + appKey, 'trelloScript', function () {\n                    this.trello.isLoading = false;\n\n                    try{g.PAssert(2403,window.Trello, 'The Trello client lib must have been loaded correctly');}catch(PERR){g.reportError(PERR);}\n\n                    if (window.Trello) {\n                        cb();\n                    } else {\n                        error('Error loading Trello. Please try again.');\n                    }\n                }.bind(this), function (e) {\n                    this.trello.isLoading = false;\n\n                    error(e);\n                });\n            }.bind(this), function (e) {\n                this.trello.isLoading = false;\n\n                error(e);\n            });\n        } else {\n            cb();\n        }\n    },\n    trelloLogin: function trelloLogin(username, password, cb, error) {\n        try{g.PAssert(2404,window.Trello, 'The Trello client lib was not properly loaded');}catch(PERR){g.reportError(PERR);}\n\n        if (window.Trello) {\n            // In the Chrome app we hijack the auth request to be in a separate webview which communicates\n            // using postMessage rather than back through the Trello.authorize caller.\n            if (platform.appPlatform === AppPlatform.Chrome) {\n                var handleRelayMessage = function handleRelayMessage(e) {\n                    var validOrigin = g.getLocationOrigin();\n\n                    if (validOrigin) {\n                        window.removeEventListener('message', handleRelayMessage);\n\n                        if (e.data.error) {\n                            error('Error authenticating with Trello.');\n                        } else {\n                            Trello.setToken(e.data.token);\n\n                            cb();\n                        }\n                    }\n                };\n\n                window.addEventListener('message', handleRelayMessage);\n            }\n\n            Trello.authorize({\n                type: platform.appPlatform === AppPlatform.Chrome ? 'redirect' : 'popup',\n                name: 'Moo.do',\n                persist: false,\n                expiration: '1hour',\n                success: cb,\n                error: error\n            });\n        } else {\n            error('Error loading Trello. Please try again.');\n        }\n    },\n    trelloImport: function trelloImport(cb, errorCB) {\n        var data = [];\n\n        Trello.get('members/me/boards', g.protectFn(function (boards) {\n            var _loopIt12 = 0;\n\n            boards = boards || [];\n\n            var totalBoards = boards.length;\n            var doneBoards = 0;\n\n            function checkFinished() {\n                if (totalBoards === doneBoards) {\n                    cb(data);\n                }\n            }\n\n            function boardDone(success) {\n                doneBoards++;\n\n                checkFinished();\n            }\n\n            for (var i = 0; i < boards.length; ++i) {\n                if (_loopIt12++ > 5000 && __infLoop && __infLoop(_loopIt12)) throw new RangeError();\n\n                var board = boards[i];\n                // console.log('Board: ', board);\n\n                if (!board.closed) {\n                    var boardItem = { text: board.name, items: [] };\n                    data.push(boardItem);\n\n                    this._handleBoard(boardItem, board.id, errorCB, boardDone);\n                } else {\n                    totalBoards--;\n                }\n            }\n\n            checkFinished();\n        }.bind(this), errorCB), errorCB);\n    },\n    _handleBoard: function _handleBoard(boardItem, id, errorCB, doneCB) {\n        Trello.get('boards/' + id + '/lists', g.protectFn(function (lists) {\n            var _loopIt13 = 0;\n\n            var doneLists = 0;\n            var totalLists = lists.length;\n\n            function checkFinished() {\n                if (doneLists === totalLists) {\n                    doneCB();\n                }\n            }\n\n            function listDone() {\n                doneLists++;\n\n                checkFinished();\n            }\n\n            for (var j = 0; j < lists.length; ++j) {\n                if (_loopIt13++ > 5000 && __infLoop && __infLoop(_loopIt13)) throw new RangeError();\n\n                var list = lists[j];\n                // console.log('List: ', list);\n\n                if (!list.closed) {\n                    var listItem = { text: list.name, items: [] };\n                    boardItem.items.push(listItem);\n\n                    this._handleList(listItem, list.id, errorCB, listDone);\n                } else {\n                    totalLists--;\n                }\n            }\n\n            checkFinished();\n        }.bind(this), errorCB), errorCB);\n    },\n    _handleList: function _handleList(listItem, id, errorCB, doneCB) {\n        Trello.get('lists/' + id + '/cards', g.protectFn(function (cards) {\n            var _loopIt14 = 0;\n\n            var doneCards = 0;\n            var totalCards = cards.length;\n\n            function checkFinished() {\n                if (doneCards === totalCards) {\n                    doneCB();\n                }\n            }\n\n            function checklistDone() {\n                doneCards++;\n\n                checkFinished();\n            }\n\n            for (var k = 0; k < cards.length; ++k) {\n                if (_loopIt14++ > 5000 && __infLoop && __infLoop(_loopIt14)) throw new RangeError();\n\n                var card = cards[k];\n                // console.log('Card: ', card);\n\n                if (!card.closed) {\n                    var cardItem = { text: card.name };\n\n                    if (card.labels && card.labels.length > 0) {\n                        var _loopIt15 = 0;\n\n                        var labelText = '';\n\n                        for (var z = 0; z < card.labels.length; ++z) {\n                            if (_loopIt15++ > 5000 && __infLoop && __infLoop(_loopIt15)) throw new RangeError();\n\n                            var label = card.labels[z];\n\n                            labelText += C.TagPrefix + (label.name.length > 0 ? label.name : label.color) + ' ';\n                        }\n\n                        cardItem.text = labelText + cardItem.text;\n                    }\n\n                    if (card.due) {\n                        cardItem.text += ' ' + C.DatePrefix + formatDate(new Date(card.due));\n                    }\n\n                    if (card.desc && card.desc.length > 0) {\n                        var _loopIt16 = 0;\n\n                        cardItem.items = [];\n\n                        var descEntries = card.desc.split('\\n');\n\n                        for (var z = 0; z < descEntries.length; ++z) {\n                            if (_loopIt16++ > 5000 && __infLoop && __infLoop(_loopIt16)) throw new RangeError();\n\n                            var entry = descEntries[z];\n\n                            if (entry && entry.length > 0) {\n                                cardItem.items.push({ text: entry });\n                            }\n                        }\n                    }\n\n                    if (card.idChecklists && card.idChecklists.length > 0) {\n                        var _loopIt17 = 0;\n\n                        if (!cardItem.items) {\n                            cardItem.items = [];\n                        }\n\n                        for (var z = 0; z < card.idChecklists.length; ++z) {\n                            if (_loopIt17++ > 5000 && __infLoop && __infLoop(_loopIt17)) throw new RangeError();\n\n                            this._handleChecklist(cardItem, card.idChecklists[z], errorCB, checklistDone);\n                        }\n                    } else {\n                        doneCards++;\n                    }\n\n                    listItem.items.push(cardItem);\n                } else {\n                    totalCards--;\n                }\n            }\n\n            checkFinished();\n        }.bind(this), errorCB), errorCB);\n    },\n    _handleChecklist: function _handleChecklist(cardItem, id, errorCB, doneCB) {\n        Trello.get('checklists/' + id + '/', g.protectFn(function (checklist) {\n            var _loopIt18 = 0;\n\n            var checklistItem = { text: checklist.name, isCollapsed: true, items: [] };\n\n            // console.log('Checklist: ', checklist);\n\n            for (var x = 0; x < checklist.checkItems.length; ++x) {\n                if (_loopIt18++ > 5000 && __infLoop && __infLoop(_loopIt18)) throw new RangeError();\n\n                var check = checklist.checkItems[x];\n\n                var isComplete = check.state === 'complete';\n\n                if (!isComplete) {\n                    var checkItem = { text: check.name, isComplete: isComplete };\n\n                    checklistItem.items.push(checkItem);\n                }\n            }\n\n            cardItem.items.push(checklistItem);\n\n            doneCB();\n        }.bind(this), errorCB), errorCB);\n    },\n    trelloSave: function trelloSave(data, cb, error) {\n        function traverse(node, parentVMLI) {\n            var nodeVMLI = d.createVMLI({\n                text: node.text,\n                isComplete: node.isComplete,\n                isCollapsed: node.isCollapsed\n            }, { parent: parentVMLI, changeType: ChangeType.AllLocal });\n\n            parentVMLI.insertItem(nodeVMLI);\n\n            if (node.items) {\n                var _loopIt19 = 0;\n\n                for (var i = 0; i < node.items.length; ++i) {\n                    if (_loopIt19++ > 5000 && __infLoop && __infLoop(_loopIt19)) throw new RangeError();\n\n                    traverse(node.items[i], nodeVMLI);\n                }\n            }\n\n            return nodeVMLI;\n        }\n\n        try {\n            var _loopIt20 = 0;\n\n            tracker.beginAction(); // BEGIN TRACKER <----\n            g.vmMain.beginUpdateItems();\n\n            var docRoot = d.getRootModel();\n            try{g.PAssert(2405,docRoot, 'Root item must exist in order to import');}catch(PERR){g.reportError(PERR);}\n\n            var impRoot = d.createVMLI({ text: 'Trello Import' }, { parent: docRoot, changeType: ChangeType.AllLocal });\n            docRoot.insertItem(impRoot);\n\n            for (var i = 0; i < data.length; ++i) {\n                if (_loopIt20++ > 5000 && __infLoop && __infLoop(_loopIt20)) throw new RangeError();\n\n                traverse(data[i], impRoot);\n            }\n\n            g.vmMain.commitUpdateItems();\n            tracker.endAction(); // END TRACKER <----\n        } catch (err) {\n            return error(err);\n        }\n\n        cb();\n    },\n    // toodledoLogin: function (username, password, cb, error)\n    // {\n    //     var clientID = 'DuchessToodledoClientID';\n\n    //     var state = 'Dchs' + (new Date()).getTime();\n\n    //     var url = 'https://api.toodledo.com/3/account/authorize.php?response_type=code&client_id=' + clientID + '&state=' + state + '&scope=basic%20tasks%20notes%20outlines%20lists';\n\n    //     window.open(url, 'toodledo', 'height=600,width=550');\n\n    //     var handleRelayMessage = function (e)\n    //     {\n    //         var validOrigin = g.getLocationOrigin();\n\n    //         if (validOrigin)\n    //         {\n    //             window.removeEventListener('message', handleRelayMessage);\n\n    //             if (e.data.error)\n    //             {\n    //                 error(e.data.error);\n    //             }\n    //             else\n    //             {\n    //                 this.toodledo.token = e.data.access_token;\n\n    //                 cb();\n    //             }\n    //         }\n    //     }.bind(this);\n\n    //     window.addEventListener('message', handleRelayMessage);\n    // },\n    // toodledoImport: function (cb, error)\n    // {\n\n    // },\n    // toodledoSave: function (data, cb, error)\n    // {\n\n    // },\n    todoistLogin: function todoistLogin(username, password, cb, error) {\n        try{g.PAssert(2406,cb, 'Todoist requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2407,error, 'Todoist requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        var clientID = window.location.hostname === 'localhost' ? '5d361221eddb4bcdb018457c7c74e698' : 'b701ac04f4df419ca4144ab208a9fb06';\n        var scope = 'data:read';\n        var state = 'Dchs' + new Date().getTime();\n\n        var url = 'https://todoist.com/oauth/authorize?client_id=' + clientID + '&scope=' + scope + '&state=' + state;\n\n        window.open(url, 'modal-todoist', 'height=600,width=550');\n\n        var handleRelayMessage = function (e) {\n            var validOrigin = g.getLocationOrigin();\n            var validState = false;\n\n            try {\n                validState = e.data.state === state;\n            } catch (err) {\n                g.reportError(err);\n            }\n\n            if (validOrigin && validState) {\n                window.removeEventListener('message', handleRelayMessage);\n\n                if (e.data.error) {\n                    error('Error authenticating with Todoist');\n                } else {\n                    var code = e.data.code;\n\n                    if (code) {\n                        g.XHR_PrivateAPI({\n                            type: 'POST',\n                            path: '/oauth/todoist',\n                            data: { code: code },\n                            requireAuth: true,\n                            cb: function (xhr) {\n                                if (xhr.status === 200) {\n                                    try {\n                                        var data = JSON.parse(xhr.response).data;\n\n                                        this.todoist.data = data;\n                                    } catch (err) {\n                                        error('Error parsing response from remote server.', err);\n                                    }\n\n                                    if (!this.todoist.data) {\n                                        error('Invalid username or password');\n                                    } else {\n                                        cb();\n                                    }\n                                } else {\n                                    error('Error contacting remote server.');\n                                }\n                            }.bind(this)\n                        });\n                    }\n                }\n            }\n        }.bind(this);\n\n        window.addEventListener('message', handleRelayMessage);\n    },\n    todoistImport: function todoistImport(cb, error) {\n        var _loopIt21 = 0,\n            _loopIt22 = 0;\n\n        try{g.PAssert(2408,cb, 'Todoist requires a success callback');}catch(PERR){g.reportError(PERR);}\n        try{g.PAssert(2409,error, 'Todoist requires an error callback');}catch(PERR){g.reportError(PERR);}\n\n        var rawData = this.todoist.data;\n        var parsedData = {};\n\n        for (var i = 0; i < rawData.projects.length; ++i) {\n            if (_loopIt21++ > 5000 && __infLoop && __infLoop(_loopIt21)) throw new RangeError();\n\n            var project = rawData.projects[i];\n\n            if (!project.is_archived && !project.is_deleted) {\n                parsedData[project.id] = { id: project.id, name: project.name, items: [], itemMap: {}, parent_id: project.parent_id, item_order: project.item_order };\n            }\n        }\n\n        var itemsAtDepth = [];\n\n        for (var _i = 0; _i < rawData.items.length; ++_i) {\n            if (_loopIt22++ > 5000 && __infLoop && __infLoop(_loopIt22)) throw new RangeError();\n\n            var item = rawData.items[_i];\n\n            if (parsedData[item.project_id] && !item.is_deleted && !item.is_archived && !item.checked) {\n                if (!item.parent_id && _i > 0 && !isNaN(item.indent) && item.indent > 1 && itemsAtDepth[item.indent - 1]) {\n                    item.parent_id = itemsAtDepth[item.indent - 1].id;\n                }\n\n                parsedData[item.project_id].items.push(item);\n                parsedData[item.project_id].itemMap[item.id] = item;\n\n                if (!isNaN(item.indent)) {\n                    itemsAtDepth[item.indent] = item;\n                }\n            }\n        }\n\n        cb(parsedData);\n    },\n    todoistSave: function todoistSave(data, cb, error) {\n        var priorityMap = [VMLIFlag.None, VMLIFlag.None, VMLIFlag.P2, VMLIFlag.P1, VMLIFlag.P0];\n\n        try {\n            tracker.beginAction(); // BEGIN TRACKER <----\n            g.vmMain.beginUpdateItems();\n\n            var docRoot = d.getRootModel();\n            try{g.PAssert(2410,docRoot, 'Root item must exist in order to import');}catch(PERR){g.reportError(PERR);}\n\n            var impRoot = d.createVMLI({ text: 'Todoist Import' }, { parent: docRoot, changeType: ChangeType.AllLocal });\n            docRoot.insertItem(impRoot);\n\n            var createdVMLIs = {};\n            var vmliToItemMap = {};\n\n            var sortFn = function sortFn(left, right) {\n                var dLeft = vmliToItemMap[left.id],\n                    dRight = vmliToItemMap[right.id];\n\n                return dLeft.item_order - dRight.item_order;\n            };\n\n            var initialize = function initialize(project, node, parentVMLI) {\n                if (node.priority) {\n                    node.priority = priorityMap[node.priority];\n                }\n\n                if (node.due_date_utc) {\n                    node.content += ' @' + formatDate(new Date(node.due_date_utc));\n                }\n\n                var nodeVMLI = d.createVMLI({\n                    text: node.content || '',\n                    isCollapsed: !!node.collapsed,\n                    priority: node.priority\n                }, { parent: parentVMLI, changeType: ChangeType.AllLocal });\n\n                createdVMLIs[node.id] = nodeVMLI;\n                vmliToItemMap[nodeVMLI.id] = node;\n\n                parentVMLI.insertSorted(nodeVMLI, sortFn);\n\n                return nodeVMLI;\n            };\n\n            var addItem = function addItem(project, item) {\n                if (!createdVMLIs[item.id]) {\n                    var parentID = item.parent_id;\n\n                    if (item.parent_id && !createdVMLIs[item.id]) {\n                        addItem(project, project.itemMap[item.parent_id]);\n                    }\n\n                    var parentVMLI = createdVMLIs[parentID || item.project_id];\n\n                    try{g.PAssert(2411,parentVMLI, 'parent item did not exist', parentID, item.project_id);}catch(PERR){g.reportError(PERR);}\n\n                    if (parentVMLI) {\n                        initialize(project, item, parentVMLI);\n                    }\n                }\n            };\n\n            var addProject = function addProject(project) {\n                if (!createdVMLIs[project.id]) {\n                    var projectParentID = project.parent_id,\n                        projectID = project.id,\n                        projectParent = void 0;\n\n                    if (projectParentID) {\n                        if (!createdVMLIs[projectParentID]) {\n                            addProject(data[projectParentID]);\n                        }\n                        projectParent = createdVMLIs[projectParentID];\n                    } else {\n                        projectParent = impRoot;\n                    }\n\n                    var projectVMLI = d.createVMLI({ text: project.name }, { parent: projectParent, changeType: ChangeType.AllLocal });\n\n                    createdVMLIs[projectID] = projectVMLI;\n                    vmliToItemMap[projectVMLI.id] = project;\n\n                    projectParent.insertSorted(projectVMLI, sortFn);\n                }\n            };\n\n            for (var projectID in data) {\n                if (data.hasOwnProperty(projectID)) {\n                    var _loopIt23 = 0;\n\n                    var project = data[projectID],\n                        items = project.items;\n\n                    addProject(project);\n\n                    for (var i = 0; i < items.length; i++) {\n                        if (_loopIt23++ > 5000 && __infLoop && __infLoop(_loopIt23)) throw new RangeError();\n\n                        addItem(project, items[i]);\n                    }\n                }\n            }\n\n            g.vmMain.commitUpdateItems();\n            tracker.endAction(); // END TRACKER <----\n        } catch (err) {\n            return error(err);\n        }\n\n        cb();\n    },\n    _createCSVEntry: function _createCSVEntry(headers, data) {\n        var _loopIt24 = 0;\n\n        var entry = {};\n\n        for (var i = 0; i < headers.length; ++i) {\n            if (_loopIt24++ > 5000 && __infLoop && __infLoop(_loopIt24)) throw new RangeError();\n\n            entry[headers[i]] = data[i];\n        }\n\n        return entry;\n    },\n    parseCSV: function parseCSV(data) {\n        var _loopIt25 = 0;\n\n        var parsed = papaparse.parse(data);\n\n        var knownHeaders = ['Area', 'Client', 'Contacts', 'Category', 'Context', 'Created By', 'Date Created', 'Date Updated', 'Delegated To', 'Start Date', 'Due Date', 'Links', 'Notes', 'Originating Entry', 'Parent Entries', 'Priority', 'Short Description', 'Title', 'Star', 'Status', 'Website References'];\n\n        var requiredHeaders = [];\n\n        var headers = parsed.data[0];\n\n        for (var i = 0; i < headers.length; ++i) {\n            if (_loopIt25++ > 5000 && __infLoop && __infLoop(_loopIt25)) throw new RangeError();\n\n            if (knownHeaders.indexOf(headers[i]) < 0) {\n                console.log('Unknown CSV Headers: ', headers[i]);\n            } else if (requiredHeaders.indexOf(headers[i]) >= 0) {\n                requiredHeaders.remove(headers[i]);\n            }\n        }\n\n        if (requiredHeaders.length === 0) {\n            var _loopIt26 = 0;\n\n            var entries = [];\n\n            for (var i = 1; i < parsed.data.length; ++i) {\n                if (_loopIt26++ > 5000 && __infLoop && __infLoop(_loopIt26)) throw new RangeError();\n\n                entries.push(this._createCSVEntry(headers, parsed.data[i]));\n            }\n        } else {\n            var err = 'Missing required export fields: ' + requiredHeaders.join(', ');\n        }\n\n        if (headers.indexOf('Short Descrption') < 0 && headers.indexOf('Title') < 0) {\n            var err = 'Missing required export fields: Short Descrption OR Title.';\n        }\n\n        return entries || err;\n    }\n};\n\nexport default dimport;"],"sourceRoot":""}