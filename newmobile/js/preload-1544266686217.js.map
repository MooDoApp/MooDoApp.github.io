{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/web/preload.worker.js","webpack:///./src/web/preload.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","3","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","Worker","__webpack_exports__","_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default","_preload_worker_js__WEBPACK_IMPORTED_MODULE_1__","_preload_worker_js__WEBPACK_IMPORTED_MODULE_1___default","Sca","decycle","callback","objects","paths","queuedObjects","returnCallback","checkForCompletion","derezObj","readBlobAsDataURL","blob","path","reader","FileReader","onloadend","loadedEvent","dataURL","target","File","updateEncodedBlob","readAsDataURL","blobtype","encoded","indexOf","replace","eval","derez","nu","Boolean","Date","Number","RegExp","Blob","String","_loopIt","__infLoop","RangeError","$ref","toString","_loopIt2","JSON","stringify","$type","$enc","getTime","undefined","retrocycle","$","px","dataURLToBlob","contentType","parts","raw","_loopIt3","split","type","rawLength","atob","uInt8Array","Uint8Array","charCodeAt","buffer","rez","item","_loopIt4","test","parseFloat","encode","val","this","decode","parse","a","location","hash","start","___workerStart","performance","now","worker","__preload","isLoading","onmessage","e","postMessage"],"mappings":"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","file":"preload-1544266686217.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t3: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"js/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([340,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"preload.worker-1544266686217.js\");\n};","import _typeof from \"@babel/runtime/helpers/typeof\";\nimport WorkerPreload from './preload.worker.js'; // TODO: TODOMOBILEWEB\n\nwindow.Sca = function () {\n  return {\n    decycle: function decycle(object, callback) {\n      //From: https://github.com/douglascrockford/JSON-js/blob/master/cycle.js\n      // Contains additional logic to convert the following object types to string\n      // so that they can properly be encoded using JSON.stringify:\n      //  *Boolean\n      //  *Date\n      //  *File\n      //  *Blob\n      //  *Number\n      //  *Regex\n      // Make a deep copy of an object or array, assuring that there is at most\n      // one instance of each object or array in the resulting structure. The\n      // duplicate references (which might be forming cycles) are replaced with\n      // an object of the form\n      //      {$ref: PATH}\n      // where the PATH is a JSONPath string that locates the first occurance.\n      // So,\n      //      var a = [];\n      //      a[0] = a;\n      //      return JSON.stringify(JSON.decycle(a));\n      // produces the string '[{\"$ref\":\"$\"}]'.\n      // JSONPath is used to locate the unique object. $ indicates the top level of\n      // the object or array. [NUMBER] or [STRING] indicates a child member or\n      // property.\n      var objects = [],\n          // Keep a reference to each unique object or array\n      paths = [],\n          // Keep the path to each unique object or array\n      queuedObjects = [],\n          returnCallback = callback;\n      /**\n       * Check the queue to see if all objects have been processed.\n       * if they have, call the callback with the converted object.\n       */\n\n      function checkForCompletion() {\n        if (queuedObjects.length === 0) {\n          returnCallback(derezObj);\n        }\n      }\n      /**\n       * Convert a blob to a data URL.\n       * @param {Blob} blob to convert.\n       * @param {String} path of blob in object being encoded.\n       */\n\n\n      function readBlobAsDataURL(blob, path) {\n        var reader = new FileReader();\n\n        reader.onloadend = function (loadedEvent) {\n          var dataURL = loadedEvent.target.result;\n          var blobtype = 'Blob';\n\n          if (blob instanceof File) {//blobtype = 'File';\n          }\n\n          updateEncodedBlob(dataURL, path, blobtype);\n        };\n\n        reader.readAsDataURL(blob);\n      }\n      /**\n       * Async handler to update a blob object to a data URL for encoding.\n       * @param {String} dataURL\n       * @param {String} path\n       * @param {String} blobtype - file if the blob is a file; blob otherwise\n       */\n\n\n      function updateEncodedBlob(dataURL, path, blobtype) {\n        var encoded = queuedObjects.indexOf(path);\n        path = path.replace('$', 'derezObj');\n        eval(path + '.$enc=\"' + dataURL + '\"');\n        eval(path + '.$type=\"' + blobtype + '\"');\n        queuedObjects.splice(encoded, 1);\n        checkForCompletion();\n      }\n\n      function derez(value, path) {\n        // The derez recurses through the object, producing the deep copy.\n        var i, // The loop counter\n        name, // Property name\n        nu; // The new object or array\n        // typeof null === 'object', so go on if this value is really an object but not\n        // one of the weird builtin objects.\n\n        if (_typeof(value) === 'object' && value !== null && !(value instanceof Boolean) && !(value instanceof Date) && !(value instanceof Number) && !(value instanceof RegExp) && !(value instanceof Blob) && !(value instanceof String)) {\n          var _loopIt = 0;\n\n          // If the value is an object or array, look to see if we have already\n          // encountered it. If so, return a $ref/path object. This is a hard way,\n          // linear search that will get slower as the number of unique objects grows.\n          for (i = 0; i < objects.length; i += 1) {\n            if (_loopIt++ > 5000 && __infLoop && __infLoop(_loopIt)) throw new RangeError();\n\n            if (objects[i] === value) {\n              return {\n                $ref: paths[i]\n              };\n            }\n          } // Otherwise, accumulate the unique value and its path.\n\n\n          objects.push(value);\n          paths.push(path); // If it is an array, replicate the array.\n\n          if (Object.prototype.toString.apply(value) === '[object Array]') {\n            var _loopIt2 = 0;\n            nu = [];\n\n            for (i = 0; i < value.length; i += 1) {\n              if (_loopIt2++ > 5000 && __infLoop && __infLoop(_loopIt2)) throw new RangeError();\n              nu[i] = derez(value[i], path + '[' + i + ']');\n            }\n          } else {\n            // If it is an object, replicate the object.\n            nu = {};\n\n            for (name in value) {\n              if (Object.prototype.hasOwnProperty.call(value, name)) {\n                nu[name] = derez(value[name], path + '[' + JSON.stringify(name) + ']');\n              }\n            }\n          }\n\n          return nu;\n        } else if (value instanceof Blob) {\n          //Queue blob for conversion\n          queuedObjects.push(path);\n          readBlobAsDataURL(value, path);\n        } else if (value instanceof Boolean) {\n          value = {\n            '$type': 'Boolean',\n            '$enc': value.toString()\n          };\n        } else if (value instanceof Date) {\n          value = {\n            '$type': 'Date',\n            '$enc': value.getTime()\n          };\n        } else if (value instanceof Number) {\n          value = {\n            '$type': 'Number',\n            '$enc': value.toString()\n          };\n        } else if (value instanceof RegExp) {\n          value = {\n            '$type': 'RegExp',\n            '$enc': value.toString()\n          };\n        } else if (typeof value === 'number') {\n          value = {\n            '$type': 'number',\n            '$enc': value + '' // handles NaN, Infinity, Negative Infinity\n\n          };\n        } else if (value === undefined) {\n          value = {\n            '$type': 'undefined'\n          };\n        }\n\n        return value;\n      }\n\n      var derezObj = derez(object, '$');\n      checkForCompletion();\n    },\n    retrocycle: function retrocycle($) {\n      //From: https://github.com/douglascrockford/JSON-js/blob/master/cycle.js\n      // Contains additional logic to convert strings to the following object types\n      // so that they can properly be decoded:\n      //  *Boolean\n      //  *Date\n      //  *File\n      //  *Blob\n      //  *Number\n      //  *Regex\n      // Restore an object that was reduced by decycle. Members whose values are\n      // objects of the form\n      //      {$ref: PATH}\n      // are replaced with references to the value found by the PATH. This will\n      // restore cycles. The object will be mutated.\n      // The eval function is used to locate the values described by a PATH. The\n      // root object is kept in a $ variable. A regular expression is used to\n      // assure that the PATH is extremely well formed. The regexp contains nested\n      // * quantifiers. That has been known to have extremely bad performance\n      // problems on some browsers for very long strings. A PATH is expected to be\n      // reasonably short. A PATH is allowed to belong to a very restricted subset of\n      // Goessner's JSONPath.\n      // So,\n      //      var s = '[{\"$ref\":\"$\"}]';\n      //      return JSON.retrocycle(JSON.parse(s));\n      // produces an array containing a single element which is the array itself.\n      var px = /^\\$(?:\\[(?:\\d+|\\\"(?:[^\\\\\\\"\\u0000-\\u001f]|\\\\([\\\\\\\"\\/bfnrt]|u[0-9a-zA-Z]{4}))*\\\")\\])*$/;\n      /**\n       * Converts the specified data URL to a Blob object\n       * @param {String} dataURL to convert to a Blob\n       * @returns {Blob} the converted Blob object\n       */\n\n      function dataURLToBlob(dataURL) {\n        var _loopIt3 = 0;\n        var BASE64_MARKER = ';base64,',\n            contentType,\n            parts,\n            raw;\n\n        if (dataURL.indexOf(BASE64_MARKER) === -1) {\n          parts = dataURL.split(',');\n          contentType = parts[0].split(':')[1];\n          raw = parts[1];\n          return new Blob([raw], {\n            type: contentType\n          });\n        }\n\n        parts = dataURL.split(BASE64_MARKER);\n        contentType = parts[0].split(':')[1];\n        raw = window.atob(parts[1]);\n        var rawLength = raw.length;\n        var uInt8Array = new Uint8Array(rawLength);\n\n        for (var i = 0; i < rawLength; ++i) {\n          if (_loopIt3++ > 5000 && __infLoop && __infLoop(_loopIt3)) throw new RangeError();\n          uInt8Array[i] = raw.charCodeAt(i);\n        }\n\n        return new Blob([uInt8Array.buffer], {\n          type: contentType\n        });\n      }\n\n      function rez(value) {\n        // The rez function walks recursively through the object looking for $ref\n        // properties. When it finds one that has a value that is a path, then it\n        // replaces the $ref object with a reference to the value that is found by\n        // the path.\n        var i, item, name, path;\n\n        if (value && _typeof(value) === 'object') {\n          if (Object.prototype.toString.apply(value) === '[object Array]') {\n            var _loopIt4 = 0;\n\n            for (i = 0; i < value.length; i += 1) {\n              if (_loopIt4++ > 5000 && __infLoop && __infLoop(_loopIt4)) throw new RangeError();\n              item = value[i];\n\n              if (item && _typeof(item) === 'object') {\n                path = item.$ref;\n\n                if (typeof path === 'string' && px.test(path)) {\n                  value[i] = eval(path);\n                } else {\n                  value[i] = rez(item);\n                }\n              }\n            }\n          } else {\n            if (value.$type !== undefined) {\n              switch (value.$type) {\n                case 'Blob':\n                case 'File':\n                  value = dataURLToBlob(value.$enc);\n                  break;\n\n                case 'Boolean':\n                  value = Boolean(value.$enc === 'true');\n                  break;\n\n                case 'Date':\n                  value = new Date(value.$enc);\n                  break;\n\n                case 'Number':\n                  value = Number(value.$enc);\n                  break;\n\n                case 'RegExp':\n                  value = eval(value.$enc);\n                  break;\n\n                case 'number':\n                  value = parseFloat(value.$enc);\n                  break;\n\n                case 'undefined':\n                  value = undefined;\n                  break;\n              }\n            } else {\n              for (name in value) {\n                if (_typeof(value[name]) === 'object') {\n                  item = value[name];\n\n                  if (item) {\n                    path = item.$ref;\n\n                    if (typeof path === 'string' && px.test(path)) {\n                      value[name] = eval(path);\n                    } else {\n                      value[name] = rez(item);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        return value;\n      }\n\n      return rez($);\n    },\n\n    /**\n     * Encode the specified object as a string.  Because of the asynchronus\n     * conversion of Blob/File to string, the encode function requires\n     * a callback\n     * @param {Object} val the value to convert.\n     * @param {function} callback the function to call once conversion is\n     * complete.  The callback gets called with the converted value.\n     */\n    \"encode\": function encode(val, callback) {\n      function finishEncode(val) {\n        callback(JSON.stringify(val));\n      }\n\n      this.decycle(val, finishEncode);\n    },\n\n    /**\n     * Deserialize the specified string to an object\n     * @param {String} val the serialized string\n     * @returns {Object} the deserialized object\n     */\n    \"decode\": function decode(val) {\n      return this.retrocycle(JSON.parse(val));\n    }\n  };\n}(); // import WorkerFirestore from './firestore.worker.js';\n// import * as Comlink from 'comlinkjs';\n// console.log('running preload');\n// if (window.Worker)\n// {\n//     window.__fireLoader = {\n//         loading: true\n//     };\n//     var start = window.___workerStart = performance.now();\n//     window.__fireWorker = new WorkerFirestore();\n//     var worker = Comlink.proxy(window.__fireWorker);\n//     worker.load(Comlink.proxyValue((value) =>\n//     {\n//         console.log('Preloaded firestore', performance.now() - start);\n//         if (window.__fireLoader.onLoad)\n//         {\n//             window.__fireLoader.onLoad(value);\n//         }\n//         else\n//         {\n//             window.__fireLoader = {\n//                 loading: false,\n//                 value: value\n//             };\n//         }\n//     }));\n// }\n\n\nif (window.Worker && WorkerPreload && location.hash.indexOf('demo=true') < 0) {\n  var start = window.___workerStart = performance.now();\n  var worker = new WorkerPreload();\n  window.__preload = {\n    isLoading: true,\n    worker: worker\n  };\n\n  worker.onmessage = function (e) {\n    // console.log('Preloaded IDB', performance.now() - start);\n    window.__preload = {\n      data: e.data\n    };\n  };\n\n  worker.postMessage('tables');\n}"],"sourceRoot":""}