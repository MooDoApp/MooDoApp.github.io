{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/web/preload.js","webpack:///./src/web/preload.worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","_preload_worker_js__WEBPACK_IMPORTED_MODULE_0__","_preload_worker_js__WEBPACK_IMPORTED_MODULE_0___default","_typeof","obj","iterator","constructor","window","Sca","decycle","callback","objects","paths","queuedObjects","returnCallback","checkForCompletion","length","derezObj","readBlobAsDataURL","blob","path","reader","FileReader","onloadend","loadedEvent","dataURL","target","result","File","updateEncodedBlob","readAsDataURL","blobtype","encoded","indexOf","replace","eval","splice","derez","nu","Boolean","Date","Number","RegExp","Blob","String","_loopIt","__infLoop","RangeError","$ref","push","toString","apply","_loopIt2","JSON","stringify","$type","$enc","getTime","undefined","retrocycle","$","px","dataURLToBlob","contentType","parts","raw","_loopIt3","split","type","rawLength","atob","uInt8Array","Uint8Array","charCodeAt","buffer","rez","item","_loopIt4","test","parseFloat","encode","val","this","decode","parse","Worker","a","location","hash","start","___workerStart","performance","now","worker","__preload","isLoading","onmessage","e","data","postMessage"],"mappings":"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","file":"preload-1543782781177.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"js/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 312);\n","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport WorkerPreload from './preload.worker.js'; // TODO: TODOMOBILEWEB\n\nwindow.Sca = function () {\n  return {\n    decycle: function decycle(object, callback) {\n      //From: https://github.com/douglascrockford/JSON-js/blob/master/cycle.js\n      // Contains additional logic to convert the following object types to string\n      // so that they can properly be encoded using JSON.stringify:\n      //  *Boolean\n      //  *Date\n      //  *File\n      //  *Blob\n      //  *Number\n      //  *Regex\n      // Make a deep copy of an object or array, assuring that there is at most\n      // one instance of each object or array in the resulting structure. The\n      // duplicate references (which might be forming cycles) are replaced with\n      // an object of the form\n      //      {$ref: PATH}\n      // where the PATH is a JSONPath string that locates the first occurance.\n      // So,\n      //      var a = [];\n      //      a[0] = a;\n      //      return JSON.stringify(JSON.decycle(a));\n      // produces the string '[{\"$ref\":\"$\"}]'.\n      // JSONPath is used to locate the unique object. $ indicates the top level of\n      // the object or array. [NUMBER] or [STRING] indicates a child member or\n      // property.\n      var objects = [],\n          // Keep a reference to each unique object or array\n      paths = [],\n          // Keep the path to each unique object or array\n      queuedObjects = [],\n          returnCallback = callback;\n      /**\n       * Check the queue to see if all objects have been processed.\n       * if they have, call the callback with the converted object.\n       */\n\n      function checkForCompletion() {\n        if (queuedObjects.length === 0) {\n          returnCallback(derezObj);\n        }\n      }\n      /**\n       * Convert a blob to a data URL.\n       * @param {Blob} blob to convert.\n       * @param {String} path of blob in object being encoded.\n       */\n\n\n      function readBlobAsDataURL(blob, path) {\n        var reader = new FileReader();\n\n        reader.onloadend = function (loadedEvent) {\n          var dataURL = loadedEvent.target.result;\n          var blobtype = 'Blob';\n\n          if (blob instanceof File) {//blobtype = 'File';\n          }\n\n          updateEncodedBlob(dataURL, path, blobtype);\n        };\n\n        reader.readAsDataURL(blob);\n      }\n      /**\n       * Async handler to update a blob object to a data URL for encoding.\n       * @param {String} dataURL\n       * @param {String} path\n       * @param {String} blobtype - file if the blob is a file; blob otherwise\n       */\n\n\n      function updateEncodedBlob(dataURL, path, blobtype) {\n        var encoded = queuedObjects.indexOf(path);\n        path = path.replace('$', 'derezObj');\n        eval(path + '.$enc=\"' + dataURL + '\"');\n        eval(path + '.$type=\"' + blobtype + '\"');\n        queuedObjects.splice(encoded, 1);\n        checkForCompletion();\n      }\n\n      function derez(value, path) {\n        // The derez recurses through the object, producing the deep copy.\n        var i, // The loop counter\n        name, // Property name\n        nu; // The new object or array\n        // typeof null === 'object', so go on if this value is really an object but not\n        // one of the weird builtin objects.\n\n        if (_typeof(value) === 'object' && value !== null && !(value instanceof Boolean) && !(value instanceof Date) && !(value instanceof Number) && !(value instanceof RegExp) && !(value instanceof Blob) && !(value instanceof String)) {\n          var _loopIt = 0;\n\n          // If the value is an object or array, look to see if we have already\n          // encountered it. If so, return a $ref/path object. This is a hard way,\n          // linear search that will get slower as the number of unique objects grows.\n          for (i = 0; i < objects.length; i += 1) {\n            if (_loopIt++ > 5000 && __infLoop && __infLoop(_loopIt)) throw new RangeError();\n\n            if (objects[i] === value) {\n              return {\n                $ref: paths[i]\n              };\n            }\n          } // Otherwise, accumulate the unique value and its path.\n\n\n          objects.push(value);\n          paths.push(path); // If it is an array, replicate the array.\n\n          if (Object.prototype.toString.apply(value) === '[object Array]') {\n            var _loopIt2 = 0;\n            nu = [];\n\n            for (i = 0; i < value.length; i += 1) {\n              if (_loopIt2++ > 5000 && __infLoop && __infLoop(_loopIt2)) throw new RangeError();\n              nu[i] = derez(value[i], path + '[' + i + ']');\n            }\n          } else {\n            // If it is an object, replicate the object.\n            nu = {};\n\n            for (name in value) {\n              if (Object.prototype.hasOwnProperty.call(value, name)) {\n                nu[name] = derez(value[name], path + '[' + JSON.stringify(name) + ']');\n              }\n            }\n          }\n\n          return nu;\n        } else if (value instanceof Blob) {\n          //Queue blob for conversion\n          queuedObjects.push(path);\n          readBlobAsDataURL(value, path);\n        } else if (value instanceof Boolean) {\n          value = {\n            '$type': 'Boolean',\n            '$enc': value.toString()\n          };\n        } else if (value instanceof Date) {\n          value = {\n            '$type': 'Date',\n            '$enc': value.getTime()\n          };\n        } else if (value instanceof Number) {\n          value = {\n            '$type': 'Number',\n            '$enc': value.toString()\n          };\n        } else if (value instanceof RegExp) {\n          value = {\n            '$type': 'RegExp',\n            '$enc': value.toString()\n          };\n        } else if (typeof value === 'number') {\n          value = {\n            '$type': 'number',\n            '$enc': value + '' // handles NaN, Infinity, Negative Infinity\n\n          };\n        } else if (value === undefined) {\n          value = {\n            '$type': 'undefined'\n          };\n        }\n\n        return value;\n      }\n\n      var derezObj = derez(object, '$');\n      checkForCompletion();\n    },\n    retrocycle: function retrocycle($) {\n      //From: https://github.com/douglascrockford/JSON-js/blob/master/cycle.js\n      // Contains additional logic to convert strings to the following object types\n      // so that they can properly be decoded:\n      //  *Boolean\n      //  *Date\n      //  *File\n      //  *Blob\n      //  *Number\n      //  *Regex\n      // Restore an object that was reduced by decycle. Members whose values are\n      // objects of the form\n      //      {$ref: PATH}\n      // are replaced with references to the value found by the PATH. This will\n      // restore cycles. The object will be mutated.\n      // The eval function is used to locate the values described by a PATH. The\n      // root object is kept in a $ variable. A regular expression is used to\n      // assure that the PATH is extremely well formed. The regexp contains nested\n      // * quantifiers. That has been known to have extremely bad performance\n      // problems on some browsers for very long strings. A PATH is expected to be\n      // reasonably short. A PATH is allowed to belong to a very restricted subset of\n      // Goessner's JSONPath.\n      // So,\n      //      var s = '[{\"$ref\":\"$\"}]';\n      //      return JSON.retrocycle(JSON.parse(s));\n      // produces an array containing a single element which is the array itself.\n      var px = /^\\$(?:\\[(?:\\d+|\\\"(?:[^\\\\\\\"\\u0000-\\u001f]|\\\\([\\\\\\\"\\/bfnrt]|u[0-9a-zA-Z]{4}))*\\\")\\])*$/;\n      /**\n       * Converts the specified data URL to a Blob object\n       * @param {String} dataURL to convert to a Blob\n       * @returns {Blob} the converted Blob object\n       */\n\n      function dataURLToBlob(dataURL) {\n        var _loopIt3 = 0;\n        var BASE64_MARKER = ';base64,',\n            contentType,\n            parts,\n            raw;\n\n        if (dataURL.indexOf(BASE64_MARKER) === -1) {\n          parts = dataURL.split(',');\n          contentType = parts[0].split(':')[1];\n          raw = parts[1];\n          return new Blob([raw], {\n            type: contentType\n          });\n        }\n\n        parts = dataURL.split(BASE64_MARKER);\n        contentType = parts[0].split(':')[1];\n        raw = window.atob(parts[1]);\n        var rawLength = raw.length;\n        var uInt8Array = new Uint8Array(rawLength);\n\n        for (var i = 0; i < rawLength; ++i) {\n          if (_loopIt3++ > 5000 && __infLoop && __infLoop(_loopIt3)) throw new RangeError();\n          uInt8Array[i] = raw.charCodeAt(i);\n        }\n\n        return new Blob([uInt8Array.buffer], {\n          type: contentType\n        });\n      }\n\n      function rez(value) {\n        // The rez function walks recursively through the object looking for $ref\n        // properties. When it finds one that has a value that is a path, then it\n        // replaces the $ref object with a reference to the value that is found by\n        // the path.\n        var i, item, name, path;\n\n        if (value && _typeof(value) === 'object') {\n          if (Object.prototype.toString.apply(value) === '[object Array]') {\n            var _loopIt4 = 0;\n\n            for (i = 0; i < value.length; i += 1) {\n              if (_loopIt4++ > 5000 && __infLoop && __infLoop(_loopIt4)) throw new RangeError();\n              item = value[i];\n\n              if (item && _typeof(item) === 'object') {\n                path = item.$ref;\n\n                if (typeof path === 'string' && px.test(path)) {\n                  value[i] = eval(path);\n                } else {\n                  value[i] = rez(item);\n                }\n              }\n            }\n          } else {\n            if (value.$type !== undefined) {\n              switch (value.$type) {\n                case 'Blob':\n                case 'File':\n                  value = dataURLToBlob(value.$enc);\n                  break;\n\n                case 'Boolean':\n                  value = Boolean(value.$enc === 'true');\n                  break;\n\n                case 'Date':\n                  value = new Date(value.$enc);\n                  break;\n\n                case 'Number':\n                  value = Number(value.$enc);\n                  break;\n\n                case 'RegExp':\n                  value = eval(value.$enc);\n                  break;\n\n                case 'number':\n                  value = parseFloat(value.$enc);\n                  break;\n\n                case 'undefined':\n                  value = undefined;\n                  break;\n              }\n            } else {\n              for (name in value) {\n                if (_typeof(value[name]) === 'object') {\n                  item = value[name];\n\n                  if (item) {\n                    path = item.$ref;\n\n                    if (typeof path === 'string' && px.test(path)) {\n                      value[name] = eval(path);\n                    } else {\n                      value[name] = rez(item);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        return value;\n      }\n\n      return rez($);\n    },\n\n    /**\n     * Encode the specified object as a string.  Because of the asynchronus\n     * conversion of Blob/File to string, the encode function requires\n     * a callback\n     * @param {Object} val the value to convert.\n     * @param {function} callback the function to call once conversion is\n     * complete.  The callback gets called with the converted value.\n     */\n    \"encode\": function encode(val, callback) {\n      function finishEncode(val) {\n        callback(JSON.stringify(val));\n      }\n\n      this.decycle(val, finishEncode);\n    },\n\n    /**\n     * Deserialize the specified string to an object\n     * @param {String} val the serialized string\n     * @returns {Object} the deserialized object\n     */\n    \"decode\": function decode(val) {\n      return this.retrocycle(JSON.parse(val));\n    }\n  };\n}(); // import WorkerFirestore from './firestore.worker.js';\n// import * as Comlink from 'comlinkjs';\n// console.log('running preload');\n// if (window.Worker)\n// {\n//     window.__fireLoader = {\n//         loading: true\n//     };\n//     var start = window.___workerStart = performance.now();\n//     window.__fireWorker = new WorkerFirestore();\n//     var worker = Comlink.proxy(window.__fireWorker);\n//     worker.load(Comlink.proxyValue((value) =>\n//     {\n//         console.log('Preloaded firestore', performance.now() - start);\n//         if (window.__fireLoader.onLoad)\n//         {\n//             window.__fireLoader.onLoad(value);\n//         }\n//         else\n//         {\n//             window.__fireLoader = {\n//                 loading: false,\n//                 value: value\n//             };\n//         }\n//     }));\n// }\n\n\nif (window.Worker && WorkerPreload && location.hash.indexOf('demo=true') < 0) {\n  var start = window.___workerStart = performance.now();\n  var worker = new WorkerPreload();\n  window.__preload = {\n    isLoading: true,\n    worker: worker\n  };\n\n  worker.onmessage = function (e) {\n    // console.log('Preloaded IDB', performance.now() - start);\n    window.__preload = {\n      data: e.data\n    };\n  };\n\n  worker.postMessage('tables');\n}","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"preload.worker-1543782781177.js\");\n};"],"sourceRoot":""}